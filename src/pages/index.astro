---
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
  </head>
  <body>
    <h1>Astro</h1>
    <canvas class="zdog-canvas" width="400" height="300"></canvas>

    <style>
      .zdog-canvas {
        /* background: #292b2b; */
        background: #e9eff1;
      }
    </style>

    <script>
      import Zdog from "zdog";

      const bodyColor = "#292b2b";

      const illo = new Zdog.Illustration({
        element: ".zdog-canvas",
        dragRotate: true,
        rotate: { x: -Zdog.TAU / 16, y: Zdog.TAU / 10 },
      });

      const groupWhiteboard = new Zdog.Group({
        addTo: illo,
      });

      const whiteboardTheWidth = 90;

      const fill = new Zdog.Rect({
        width: whiteboardTheWidth,
        height: 120,
        stroke: 2,
        color: "#fff",
        fill: true,
      });

      const border = new Zdog.Rect({
        width: whiteboardTheWidth,
        height: 120,
        stroke: 8,
        color: bodyColor,
      });

      const groupLeftStand = new Zdog.Group({
        translate: { x: -(fill.width / 2) - 12, y: 40 },
      });

      const stand = new Zdog.Rect({
        width: 16,
        height: 80,
        stroke: 10,
        color: bodyColor,
        fill: true,
        rotate: { y: Zdog.TAU / 4 },
      });

      const groupRightStand = new Zdog.Group({
        translate: { x: fill.width / 2 + 12, y: 40 },
      });

      groupLeftStand.addChild(stand);
      groupRightStand.addChild(stand.copy());
      illo.addChild(groupRightStand);
      illo.addChild(groupLeftStand);
      groupWhiteboard.addChild(fill);
      groupWhiteboard.addChild(border);

      groupWhiteboard.rotate.x = 0;
      let animateSpring = createSpringAnimation(180, 14, 1);
      animate();

      setInterval(() => {
        groupWhiteboard.rotate.x = 0;
        animateSpring = createSpringAnimation(180, 14, 1);
        animate();
      }, 3000);

      function animate() {
        illo.updateRenderGraph();
        const currX = groupWhiteboard.rotate.x;
        const nextX = animateSpring(currX);

        // If difference is imperceptible, stop animating
        if (Math.abs(currX - nextX) <= 0.0001) {
          return;
        }

        groupWhiteboard.rotate.x = nextX;
        requestAnimationFrame(animate);
      }

      // Spring physics: https://blog.maximeheckel.com/posts/the-physics-behind-spring-animations/

      function createSpringAnimation(
        stiffness: number,
        damping: number,
        mass: number
      ) {
        let velocity = 0;
        const springLength = -Zdog.TAU / 2;
        const k = -stiffness;
        const d = -damping;
        const frameRate = 1 / 60;

        // curry values that change overtime
        return function animate(x: number) {
          const forceOfSpring = k * (x - springLength);
          const forceOfDamping = d * velocity;
          const acceleration = (forceOfSpring + forceOfDamping) / mass;
          velocity += acceleration * frameRate;
          const newX = x + velocity * frameRate;

          return newX;
        };
      }
    </script>
  </body>
</html>
